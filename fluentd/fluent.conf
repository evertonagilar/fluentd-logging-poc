<source>
  @type forward
  port 24224
  bind 0.0.0.0
  <parse>
    @type json
  </parse>
</source>

<filter docker.logify>
  @type parser
  key_name log
  reserve_data false
  <parse>
    @type json
  </parse>
</filter>


# <match docker.logify>
#   @type stdout
# </match>

# <match docker.logify.**>
#   @type logtail
#   @id output_logify_logtail
#   source_token ${ENV['TOKEN_DOCKER_LOGIFY']}
#   flush_interval 2 # in seconds
# </match>

# <match docker.nginx.**>
#   @type logtail
#   @id output_nginx_logtail
#   source_token ${ENV['TOKEN_DOCKER_NGINX']}
#   flush_interval 2 # in seconds
# </match>

# <label @FLUENT_LOG>
# <match fluent.*>
#   @type logtail
#   @id output_fluent_logtail
#   source_token ${ENV['TOKEN_FLUENT_LOG']}
#   flush_interval 2 # in seconds
# </match>
# </label>



<filter docker.logify>
  @type record_transformer
  enable_ruby true
  #remove_keys emailAddress
  <record>
    hostname "#{Socket.gethostname}"
    timestamp ${Time.at(record["timestamp"]).strftime("%Y-%m-%dT%H:%M:%S.%L%z")}
    is_successful ${record["status"] == 200 ? "true" : "false"}
    ip ${record["ip"]&.gsub(/(\d+\.\d+\.\d+\.\d+)/, 'REDACTED')}
  </record>
</filter>




<match docker.logify>
  @type stdout
  <format>
  @type json
  </format>
</match>

# <match docker.nginx>
#   @type stdout
#   <format>
#   @type json
#   </format>
# </match>

# <match docker.sie>
#   @type stdout
#   <format>
#   @type json
#   </format>
# </match>
